import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from info import file_id

token = file_id.token
bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
class Form(StatesGroup):
    date = State() 
    time = State() 
    size = State()
    name = State()
    telephone = State()

@dp.message_handler(commands="start")
async def start_message(message: types.Message):
    markup=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1=types.KeyboardButton('üëâüèª –ü–ï–†–ï–ô–¢–ò –ö –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Æ üëàüèª')
    markup.add(item1)
    await message.answer("""–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ªü§ó
–ü–∞—Ä—É —É—Ç–æ—á–Ω–µ–Ω–∏–π –∏ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æüëåüèª

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 
¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é¬ª, –∏ –º—ã –Ω–∞—á–Ω—ë–º.
–û–Ω–∞ —Å–ø—Ä—è—Ç–∞–ª–∞—Å—å –≤–Ω–∏–∑—É üôà""",reply_markup=markup)
    
@dp.message_handler(lambda message: message.text == 'chat_id')
async def message_date(message: types.Message):
    await message.answer(message.chat.id)

@dp.message_handler(lambda message: message.text == 'üëâüèª –ü–ï–†–ï–ô–¢–ò –ö –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Æ üëàüèª')
async def message_date(message: types.Message):
    await Form.date.set()
    await message.answer("–ó–¥–µ—Å—å –Ω–∞–º –Ω—É–∂–Ω–∞ —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –í–∞—à–µ–≥–æ –≤–∏–∑–∏—Ç–∞ üßê")

@dp.message_handler(state=Form.date)
async def get_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
    await Form.next()
    await message.answer("""–í –∫–æ—Ç–æ—Ä–æ–º —á–∞—Å—É? 
–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 12:00 –¥–æ 23:00""")
    
@dp.message_handler(state=Form.time)
async def get_time(message: types.Message, state: FSMContext):
    await Form.next()
    async with state.proxy() as data:
        data['time'] = message.text
    await message.answer('–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π?')
    
@dp.message_handler(state=Form.size)
async def get_size(message: types.Message, state: FSMContext):
    await Form.next()
    async with state.proxy() as data:
        data['size'] = message.text
    await message.answer('–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ü•∞')
    
@dp.message_handler(state=Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await Form.next()
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('–ù–∞–º –Ω—É–∂–µ–Ω –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å - –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚òéÔ∏è ')
    
@dp.message_handler(state=Form.telephone)
async def get_telephone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['telephone'] = message.text
    await message.answer("""–Ø –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–∏–º —Ö–æ—Å—Ç–µ—Å ü§åüèª
–û–Ω–∏ —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç —Ä–µ–∑–µ—Ä–≤ ü§ó""")
    new_message = ''
    async with state.proxy() as data:
        date, time, size, name, telephone = data['date'], data['time'], data['size'], data['name'], data['telephone']
        new_message += f'{message.from_user.username}\n\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {size}\n–ò–º—è –≥–æ—Å—Ç—è: {name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {telephone}'
    await bot.send_message(file_id.chat_id, new_message) 
    await message.answer_photo('AgACAgIAAxkBAAICmGIQTamNcbDVa5dLQRTMUtfmmsUhAAKNujEbuYSBSEkanxXtHmtkAQADAgADeAADIwQ')
        
@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")
    return True

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)